name: Build toolchain

on:
  push:
    branches:
      - main

env:
  LLVM_VERSION: 18
  NINJA_VERSION: 1.12.0

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: true
      matrix:
        platform:
          - linux/amd64
          - linux/arm64/v8

    steps:
      - name: Prepare
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set ninja filename
        id: ninja-filename
        run: |
          if [ "${{ matrix.platform }}" = "linux/amd64" ]; then
            echo 'name=ninja-linux.zip' >> $GITHUB_OUTPUT
          else
            echo 'name=ninja-linux-aarch64.zip' >> $GITHUB_OUTPUT
          fi

      - name: Login to GitHub registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Metadata
        uses: docker/metadata-action@v5
        id: metadata
        with:
          images: ghcr.io/${{ github.repository }}
          flavor: |
            latest=true
            prefix=
            suffix=
          tags: |
            type=raw,value=llvm${{ env.LLVM_VERSION }}-ninja${{ env.NINJA_VERSION }}

      - name: Build image
        uses: docker/build-push-action@v5
        id: build
        with:
          push: true
          context: .
          platforms: ${{ matrix.platform }}
          tags: ${{ steps.metadata.outputs.tags }}
          labels: ${{ steps.metadata.outputs.labels }}
          build-args: |
            LLVM_VERSION=${{ env.LLVM_VERSION }}
            NINJA_VERSION=${{ env.NINJA_VERSION }}
            NINJA_FILENAME=${{ steps.ninja-filename.outputs.name }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=image,name=${{ github.repository }},push-by-digest=true,name-canonical=true,push=true

      - name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.PLATFORM_PAIR }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  merge:
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digests-*
          merge-multiple: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ github.repository }}

      - name: Login to GitHub registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ github.repository }}@sha256:%s ' *)

      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ github.repository }}:${{ steps.meta.outputs.version }}
